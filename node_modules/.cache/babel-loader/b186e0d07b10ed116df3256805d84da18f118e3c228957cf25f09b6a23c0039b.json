{"ast":null,"code":"var _jsxFileName = \"/Users/seancurran/dev/tidal-tracker-as_react/src/components/nowplaying.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NowPlaying() {\n  _s();\n  const [trackInfo, setTrackInfo] = useState({\n    title: '',\n    artist: '',\n    isPlaying: false,\n    error: null\n  });\n  useEffect(() => {\n    const fetchNowPlaying = async () => {\n      try {\n        const response = await fetch('/now-playing');\n        const data = await response.json();\n        if (data.error) {\n          setTrackInfo({\n            title: '',\n            artist: '',\n            isPlaying: false,\n            error: data.error\n          });\n        } else {\n          setTrackInfo({\n            ...data,\n            isPlaying: true,\n            error: null\n          });\n        }\n      } catch (error) {\n        setTrackInfo({\n          title: '',\n          artist: '',\n          isPlaying: false,\n          error: 'Failed to fetch track information'\n        });\n      }\n    };\n\n    // Initial fetch\n    fetchNowPlaying();\n\n    // Poll every 10 seconds\n    const intervalId = setInterval(fetchNowPlaying, 10000);\n\n    // Cleanup interval on unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  if (!trackInfo.isPlaying) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: trackInfo.error || 'No track currently playing'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Now Playing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: trackInfo.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: trackInfo.artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(NowPlaying, \"6dLDK1B/lvkDH/8beqdJq4g0RcM=\");\n_c = NowPlaying;\nexport default NowPlaying;\nvar _c;\n$RefreshReg$(_c, \"NowPlaying\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NowPlaying","_s","trackInfo","setTrackInfo","title","artist","isPlaying","error","fetchNowPlaying","response","fetch","data","json","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seancurran/dev/tidal-tracker-as_react/src/components/nowplaying.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction NowPlaying() {\n    const [trackInfo, setTrackInfo] = useState({\n        title: '',\n        artist: '',\n        isPlaying: false,\n        error: null\n    });\n\n    useEffect(() => {\n        const fetchNowPlaying = async () => {\n            try {\n                const response = await fetch('/now-playing');\n                const data = await response.json();\n\n                if (data.error) {\n                    setTrackInfo({\n                        title: '',\n                        artist: '',\n                        isPlaying: false,\n                        error: data.error\n                    });\n                } else {\n                    setTrackInfo({\n                        ...data,\n                        isPlaying: true,\n                        error: null\n                    });\n                }\n            } catch (error) {\n                setTrackInfo({\n                    title: '',\n                    artist: '',\n                    isPlaying: false,\n                    error: 'Failed to fetch track information'\n                });\n            }\n        };\n\n        // Initial fetch\n        fetchNowPlaying();\n\n        // Poll every 10 seconds\n        const intervalId = setInterval(fetchNowPlaying, 10000);\n\n        // Cleanup interval on unmount\n        return () => clearInterval(intervalId);\n    }, []);\n\n    if (!trackInfo.isPlaying) {\n        return (\n            <div>\n                <h1>Now Playing</h1>\n        <p>{trackInfo.error || 'No track currently playing'}</p>\n        </div>\n    );\n    }\n\n    return (\n        <div>\n            <h1>Now Playing</h1>\n    <h2>{trackInfo.title}</h2>\n    <p>{trackInfo.artist}</p>\n    </div>\n);\n}\n\nexport default NowPlaying;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACX,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACZ,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,CAAC;QAC5C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACJ,KAAK,EAAE;UACZJ,YAAY,CAAC;YACTC,KAAK,EAAE,EAAE;YACTC,MAAM,EAAE,EAAE;YACVC,SAAS,EAAE,KAAK;YAChBC,KAAK,EAAEI,IAAI,CAACJ;UAChB,CAAC,CAAC;QACN,CAAC,MAAM;UACHJ,YAAY,CAAC;YACT,GAAGQ,IAAI;YACPL,SAAS,EAAE,IAAI;YACfC,KAAK,EAAE;UACX,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZJ,YAAY,CAAC;UACTC,KAAK,EAAE,EAAE;UACTC,MAAM,EAAE,EAAE;UACVC,SAAS,EAAE,KAAK;UAChBC,KAAK,EAAE;QACX,CAAC,CAAC;MACN;IACJ,CAAC;;IAED;IACAC,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMK,UAAU,GAAGC,WAAW,CAACN,eAAe,EAAE,KAAK,CAAC;;IAEtD;IACA,OAAO,MAAMO,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACX,SAAS,CAACI,SAAS,EAAE;IACtB,oBACIP,OAAA;MAAAiB,QAAA,gBACIjB,OAAA;QAAAiB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BrB,OAAA;QAAAiB,QAAA,EAAId,SAAS,CAACK,KAAK,IAAI;MAA4B;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAEV;EAEA,oBACIrB,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BrB,OAAA;MAAAiB,QAAA,EAAKd,SAAS,CAACE;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC1BrB,OAAA;MAAAiB,QAAA,EAAId,SAAS,CAACG;IAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV;AAACnB,EAAA,CAhEQD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAkEnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}