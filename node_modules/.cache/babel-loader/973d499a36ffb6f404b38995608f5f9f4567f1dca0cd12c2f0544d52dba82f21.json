{"ast":null,"code":"import logo from './logo.svg';\nimport './App.css';\nfunction App() {\n  return getNowPlaying('/now-playing', (req, res) => {\n    // AppleScript to get Tidal track info\n    const script = `\n     if application \"TIDAL\" is running then\n         tell application \"System Events\"\n             tell process \"TIDAL\"\n                 try\n                     set windowTitle to name of window 1\n                     return windowTitle\n                 on error\n                     return \"No track playing\"\n                 end try\n             end tell\n         end tell\n     else\n         return \"TIDAL not running\"\n     end if\n `;\n    applescript.execString(script, (err, result) => {\n      if (err || !result || result === \"TIDAL not running\" || result === \"No track playing\") {\n        res.json({\n          error: 'No track playing'\n        });\n        return;\n      }\n\n      // Parse the window title\n      // Tidal format on Mac is usually \"Track - Artist - TIDAL\"\n      const parts = result.split(' - ');\n      if (parts.length >= 2) {\n        res.json({\n          title: parts[0],\n          artist: parts[1],\n          isPlaying: true\n        });\n      } else {\n        res.json({\n          error: 'Could not parse track info'\n        });\n      }\n    });\n  });\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","App","getNowPlaying","req","res","script","applescript","execString","err","result","json","error","parts","split","length","title","artist","isPlaying","_c","$RefreshReg$"],"sources":["/Users/seancurran/dev/tidal-tracker-as_react/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return getNowPlaying('/now-playing', (req, res) => {\n     // AppleScript to get Tidal track info\n     const script = `\n     if application \"TIDAL\" is running then\n         tell application \"System Events\"\n             tell process \"TIDAL\"\n                 try\n                     set windowTitle to name of window 1\n                     return windowTitle\n                 on error\n                     return \"No track playing\"\n                 end try\n             end tell\n         end tell\n     else\n         return \"TIDAL not running\"\n     end if\n `;\n\n     applescript.execString(script, (err, result) => {\n       if (err || !result || result === \"TIDAL not running\" || result === \"No track playing\") {\n         res.json({ error: 'No track playing' });\n         return;\n       }\n\n       // Parse the window title\n       // Tidal format on Mac is usually \"Track - Artist - TIDAL\"\n       const parts = result.split(' - ');\n       if (parts.length >= 2) {\n         res.json({\n           title: parts[0],\n           artist: parts[1],\n           isPlaying: true\n         });\n       } else {\n         res.json({ error: 'Could not parse track info' });\n       }\n     });\n   });\n}\nexport default App;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAElB,SAASC,GAAGA,CAAA,EAAG;EACb,OAAOC,aAAa,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;IAChD;IACA,MAAMC,MAAM,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IAEGC,WAAW,CAACC,UAAU,CAACF,MAAM,EAAE,CAACG,GAAG,EAAEC,MAAM,KAAK;MAC9C,IAAID,GAAG,IAAI,CAACC,MAAM,IAAIA,MAAM,KAAK,mBAAmB,IAAIA,MAAM,KAAK,kBAAkB,EAAE;QACrFL,GAAG,CAACM,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAmB,CAAC,CAAC;QACvC;MACF;;MAEA;MACA;MACA,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAK,CAAC,KAAK,CAAC;MACjC,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QACrBV,GAAG,CAACM,IAAI,CAAC;UACPK,KAAK,EAAEH,KAAK,CAAC,CAAC,CAAC;UACfI,MAAM,EAAEJ,KAAK,CAAC,CAAC,CAAC;UAChBK,SAAS,EAAE;QACb,CAAC,CAAC;MACJ,CAAC,MAAM;QACLb,GAAG,CAACM,IAAI,CAAC;UAAEC,KAAK,EAAE;QAA6B,CAAC,CAAC;MACnD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACL;AAACO,EAAA,GAxCQjB,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}